---
import { languages, type Language } from '../i18n/index';
import { t } from '../i18n/translations';

interface Props {
  lang?: Language;
}

const { lang = 'en' } = Astro.props;
const translate = t(lang);
const currentLang = lang;
---

<div class="relative inline-block text-left">
  <button
    id="language-menu-button"
    type="button"
    class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    aria-expanded="false"
    aria-haspopup="true"
  >
    {languages[currentLang]}
    <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    id="language-menu"
    class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {Object.entries(languages).map(([lang, label]) => {
        const isActive = lang === currentLang;
        const href = lang === 'en' ? '/' : `/${lang}/`;
        
        return (
          <a
            href={href}
            class={`${
              isActive 
                ? 'bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-gray-100' 
                : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600'
            } group flex items-center px-4 py-2 text-sm transition-colors`}
            role="menuitem"
          >
            <span class="flex-1">{label}</span>
            {isActive && (
              <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            )}
          </a>
        );
      })}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');
    
    if (button && menu) {
      button.addEventListener('click', function() {
        const isOpen = !menu.classList.contains('hidden');
        if (isOpen) {
          menu.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        } else {
          menu.classList.remove('hidden');
          button.setAttribute('aria-expanded', 'true');
        }
      });
      
      // 点击外部关闭菜单
      document.addEventListener('click', function(event) {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          menu.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script> 